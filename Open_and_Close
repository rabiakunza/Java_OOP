
O — Open/Closed Principle
This principle suggests that “classes/method/packages should be open for extension but closed for modification”. 
What is means is that if the class A is written by the developer AA, and if the developer BB wants some modification on 
that then developer BB should be easily do that by extending class A, but not by modifying class A.

new functionality should cause minimum change to already existing code.In a development lifecycle new requirements continues to come in
and if the developer are forced to change the already teasted/completed modules then then the design is considered flaued. 

idealy the developer should change the environment sourroundig the module then the module itself.

this principle is closest friend to software testing as when the unit testing is done for already running code then the cost of testing
already tested code to support new requirement is very high.Not only you have to change the code but also the test cases you wrote.


example 1. HOSPITAL EMPLOYEES EXAMPLE(https://youtu.be/BLcnGmsZ5EE)
----------------------------------------
1)abstract employee class with common properties and abstract methods(ex-duties()).
2)In entity package
  create multiple hospital employee class (ex-doctor,nurse,other staff) and implement corresponding duties() for each employee type.
3)In dao package.
  create interface with methods -createEmployee  and getEmployee and implement these method for storing data in database
4)create HospialManagement.java class with method                    //this class is open to extension and close for modificaton
 public void callUpon(Employee employee) {                       //as any other type of employee may come still the code won't ch
	employee.performDuties();                               //the implementation of performDuties() will be in the employee class.
}
	
5)create all the employee object in client and pass that object to the HospitalManagement object
public class EmergencyRoomProcess {

	public static void main(String[] args) {
		HospitalManagement ERDirector=new HospitalManagement();
		Employee vinay=new Doctor(1,"viany","emergency",true);
		ERDirector.callUpon(vinay);
  }
}
---------------------------------------------------------------------------




https://youtu.be/BLcnGmsZ5EE
https://medium.com/mindorks/solid-principles-explained-with-examples-79d1ce114ace

